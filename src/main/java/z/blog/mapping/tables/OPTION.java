/*
 * This file is generated by jOOQ.
 */
package z.blog.mapping.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import z.blog.mapping.DefaultSchema;
import z.blog.mapping.tables.records.OptionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OPTION extends TableImpl<OptionRecord> {

    private static final long serialVersionUID = 1188202444;

    /**
     * The reference instance of <code>t_option</code>
     */
    public static final OPTION T_OPTION = new OPTION();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OptionRecord> getRecordType() {
        return OptionRecord.class;
    }

    /**
     * The column <code>t_option.name</code>.
     */
    public final TableField<OptionRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>t_option.value</code>.
     */
    public final TableField<OptionRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * Create a <code>t_option</code> table reference
     */
    public OPTION() {
        this(DSL.name("t_option"), null);
    }

    /**
     * Create an aliased <code>t_option</code> table reference
     */
    public OPTION(String alias) {
        this(DSL.name(alias), T_OPTION);
    }

    /**
     * Create an aliased <code>t_option</code> table reference
     */
    public OPTION(Name alias) {
        this(alias, T_OPTION);
    }

    private OPTION(Name alias, Table<OptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private OPTION(Name alias, Table<OptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OptionRecord> getPrimaryKey() {
        return Internal.createUniqueKey(OPTION.T_OPTION, "pk_t_option", new TableField[] { OPTION.T_OPTION.NAME }, true);
    }

    @Override
    public List<UniqueKey<OptionRecord>> getKeys() {
        return Arrays.<UniqueKey<OptionRecord>>asList(
              Internal.createUniqueKey(OPTION.T_OPTION, "pk_t_option", new TableField[] { OPTION.T_OPTION.NAME }, true)
        );
    }

    @Override
    public OPTION as(String alias) {
        return new OPTION(DSL.name(alias), this);
    }

    @Override
    public OPTION as(Name alias) {
        return new OPTION(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OPTION rename(String name) {
        return new OPTION(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OPTION rename(Name name) {
        return new OPTION(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
